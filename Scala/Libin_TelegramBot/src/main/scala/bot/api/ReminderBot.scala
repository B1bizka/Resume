package bot.api

import bot.api.{BotUtils, MenuHandler}
import bot.dal.ReminderStorage
import bot.domain.Reminder
import cats.effect.{Async, Ref, Temporal}
import cats.Parallel
import telegramium.bots.high._
import telegramium.bots._
import cats.syntax.all._



class ReminderBot[F[_]: Async: Parallel: Temporal](
                                                    reminderStorage: ReminderStorage[F],
                                                    botUtils: BotUtils[F]
                                                  )(implicit bot: Api[F]) extends LongPollBot[F](bot) {

  private val pendingEdits: Ref[F, Map[Long, Int]] =
    Ref.unsafe(Map.empty[Long, Int])

  override def onMessage(msg: Message): F[Unit] = {
    msg.text match {
      case Some(text) =>
        pendingEdits.get.flatMap { edits =>
          edits.get(msg.chat.id) match {
            case Some(reminderIndex) =>
              val parts = text.split(" ", 3)
              if (parts.length < 3) {
                bot.execute(
                  Methods.sendMessage(
                    ChatIntId(msg.chat.id),
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! –§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM –¢–ï–ö–°–¢"
                  )
                ).void
              } else {
                val dateStr = parts(0)
                val timeStr = parts(1)
                val newMessage = parts(2)
                val normalizedTime = timeStr.split(":") match {
                  case Array(h, m) =>
                    val paddedH = if (h.length == 1) s"0$h" else h
                    val paddedM = if (m.length == 1) s"0$m" else m
                    s"$paddedH:$paddedM"
                  case _ => timeStr
                }
                try {
                  val newDateTime = botUtils.parseToTimestamp(dateStr, normalizedTime)
                  editReminder(msg.chat.id, reminderIndex, s"$dateStr $normalizedTime", newMessage) >>
                    pendingEdits.update(_ - msg.chat.id)
                } catch {
                  case _: Exception =>
                    bot.execute(
                      Methods.sendMessage(
                        ChatIntId(msg.chat.id),
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM"
                      )
                    ).void
                }
              }

            case None =>
              text match {
                case "/start" =>
                  sendMainMenu(msg.chat.id)
                case t if t.startsWith("/remind") =>
                  handleRemindCommand(msg)
                case t if t.startsWith("/delete") =>
                  handleDeleteCommand(msg)
                case t if t.startsWith("/edit") =>
                  val parts = t.stripPrefix("/edit").trim.split(" ", 2)
                  if (parts.isEmpty || parts(0).isEmpty) {
                    bot.execute(
                      Methods.sendMessage(
                        ChatIntId(msg.chat.id),
                        "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /edit 1"
                      )
                    ).void
                  } else {
                    val reminderIndex = parts(0).toIntOption.getOrElse(0)
                    if (reminderIndex <= 0) {
                      bot.execute(
                        Methods.sendMessage(
                          ChatIntId(msg.chat.id),
                          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
                        )
                      ).void
                    } else {
                      askForReminderEdit(msg.chat.id, reminderIndex)
                    }
                  }
                case _ =>
                  ().pure[F]
              }
          }
        }
      case None => ().pure[F]
    }
  }

  override def onCallbackQuery(query: CallbackQuery): F[Unit] = {
    query.data match {
      case Some("add_reminder") =>
        askForTextReminder(query.from.id)

      case Some("active_reminders") =>
        showActiveReminders(query.from.id)

      case Some("delete_reminder") =>
        askForReminderDeletion(query.from.id)

      case Some("edit_reminders") =>
        askForReminderEdit(query.from.id)

      case Some(reminderId) if reminderId.startsWith("delete_") =>
        val reminderIndexOption = reminderId.stripPrefix("delete_").toIntOption
        reminderIndexOption match {
          case Some(reminderIndex) =>
            deleteReminder(query.from.id, reminderIndex)
          case None =>
            bot.execute(
              Methods.sendMessage(
                ChatIntId(query.from.id),
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
              )
            ).void
        }

      case Some(reminderId) if reminderId.startsWith("edit_") =>
        val reminderIndexOption = reminderId.stripPrefix("edit_").toIntOption
        reminderIndexOption match {
          case Some(reminderIndex) =>
            pendingEdits.update(_.updated(query.from.id, reminderIndex)) >>
              bot.execute(
                Methods.sendMessage(
                  ChatIntId(query.from.id),
                  s"üîÑ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º $reminderIndex.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM –¢–ï–ö–°–¢"
                )
              ).void
          case None =>
            bot.execute(
              Methods.sendMessage(
                ChatIntId(query.from.id),
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
              )
            ).void
        }

      case _ =>
        ().pure[F]
    }
  }

  private def handleRemindCommand(msg: Message): F[Unit] = {
    val parts = msg.text.get.stripPrefix("/remind").trim.split(" ", 3)
    if (parts.length < 3) {
      bot.execute(
        Methods.sendMessage(
          ChatIntId(msg.chat.id),
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remind YYYY-MM-DD HH:MM –¢–ï–ö–°–¢"
        )
      ).void
    } else {
      val dateStr = parts(0)
      val timeStr = parts(1)
      val text = parts(2)
      val normalizedTime = timeStr.split(":") match {
        case Array(h, m) if h.length == 1 => s"0$h:$m"
        case _ => timeStr
      }
      try {
        val dateTime = botUtils.parseToTimestamp(dateStr, normalizedTime)
        val now = System.currentTimeMillis() / 1000
        if (dateTime <= now) {
          bot.execute(
            Methods.sendMessage(
              ChatIntId(msg.chat.id),
              "‚ö† –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º!"
            )
          ).void
        } else {
          reminderStorage.create(Reminder(None, dateTime, msg.chat.id, text)) >>
            bot.execute(
              Methods.sendMessage(
                ChatIntId(msg.chat.id),
                s"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${botUtils.formatTimestamp(dateTime)}!"
              )
            ).void
        }
      } catch {
        case _: Exception =>
          bot.execute(
            Methods.sendMessage(
              ChatIntId(msg.chat.id),
              "‚ùå –û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM"
            )
          ).void
      }
    }
  }

  private def handleDeleteCommand(msg: Message): F[Unit] = {
    val parts = msg.text.get.stripPrefix("/delete").trim.split(" ", 2)
    if (parts.isEmpty || parts(0).isEmpty) {
      bot.execute(
        Methods.sendMessage(
          ChatIntId(msg.chat.id),
          "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1"
        )
      ).void
    } else {
      parts(0).toIntOption match {
        case Some(reminderIndex) if reminderIndex > 0 =>
          deleteReminder(msg.chat.id, reminderIndex)
        case _ =>
          bot.execute(
            Methods.sendMessage(
              ChatIntId(msg.chat.id),
              "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
            )
          ).void
      }
    }
  }

  private def sendMainMenu(chatId: Long): F[Unit] = {
    bot.execute(
      Methods.sendMessage(
        ChatIntId(chatId),
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        replyMarkup = Some(MenuHandler.mainMenu)
      )
    ).void
  }

  private def askForTextReminder(chatId: Long): F[Unit] = {
    bot.execute(
      Methods.sendMessage(
        ChatIntId(chatId),
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/remind YYYY-MM-DD HH:MM –¢–ï–ö–°–¢"
      )
    ).void
  }

  private def showActiveReminders(chatId: Long): F[Unit] = {
    reminderStorage.findByChatId(chatId).flatMap { reminders =>
      if (reminders.isEmpty) {
        bot.execute(
          Methods.sendMessage(ChatIntId(chatId), "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
        ).void
      } else {
        val currentTime = botUtils.formatTimestamp(System.currentTimeMillis() / 1000)
        val remindersText = reminders.zipWithIndex.map { case (r, idx) =>
          s"${idx + 1}. üìÖ ${botUtils.formatTimestamp(r.dateTime)} - ${r.message}"
        }.mkString("\n")
        bot.execute(
          Methods.sendMessage(
            ChatIntId(chatId),
            s"üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ $currentTime:\n$remindersText"
          )
        ).void
      }
    }
  }

  private def askForReminderDeletion(chatId: Long): F[Unit] = {
    reminderStorage.findByChatId(chatId).flatMap { reminders =>
      if (reminders.isEmpty) {
        bot.execute(
          Methods.sendMessage(ChatIntId(chatId), "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        ).void
      } else {
        val remindersText = reminders.zipWithIndex.map { case (r, idx) =>
          s"${idx + 1}. üìÖ ${botUtils.formatTimestamp(r.dateTime)} - ${r.message}"
        }.mkString("\n")
        bot.execute(
          Methods.sendMessage(
            ChatIntId(chatId),
            s"üîî –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /delete –Ω–æ–º–µ—Ä\n$remindersText"
          )
        ).void
      }
    }
  }

  private def askForReminderEdit(chatId: Long): F[Unit] = {
    reminderStorage.findByChatId(chatId).flatMap { reminders =>
      if (reminders.isEmpty) {
        bot.execute(
          Methods.sendMessage(ChatIntId(chatId), "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!")
        ).void
      } else {
        val remindersText = reminders.zipWithIndex.map { case (r, idx) =>
          s"${idx + 1}. üìÖ ${botUtils.formatTimestamp(r.dateTime)} - ${r.message}"
        }.mkString("\n")
        bot.execute(
          Methods.sendMessage(
            ChatIntId(chatId),
            s"üîî –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /edit –Ω–æ–º–µ—Ä\n$remindersText"
          )
        ).void
      }
    }
  }

  private def askForReminderEdit(chatId: Long, reminderIndex: Int): F[Unit] = {
    reminderStorage.findByChatId(chatId).flatMap { reminders =>
      if (reminders.isEmpty) {
        bot.execute(
          Methods.sendMessage(ChatIntId(chatId), "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!")
        ).void
      } else if (reminderIndex < 1 || reminderIndex > reminders.size) {
        bot.execute(
          Methods.sendMessage(ChatIntId(chatId), "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        ).void
      } else {
        pendingEdits.update(_.updated(chatId, reminderIndex)) >>
          bot.execute(
            Methods.sendMessage(
              ChatIntId(chatId),
              s"üîÑ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º $reminderIndex.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM –¢–ï–ö–°–¢"
            )
          ).void
      }
    }
  }

  def editReminder(chatId: Long, reminderIndex: Int, newDateTimeStr: String, newMessage: String): F[Unit] = {
    val parts = newDateTimeStr.split(" ")
    if (parts.length != 2) {
      bot.execute(
        Methods.sendMessage(
          ChatIntId(chatId),
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏! –§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM"
        )
      ).void
    } else {
      val dateStr = parts(0)
      val timeStr = parts(1)
      val newDateTime = botUtils.parseToTimestamp(dateStr, timeStr)
      val now = System.currentTimeMillis() / 1000
      if (newDateTime <= now) {
        bot.execute(
          Methods.sendMessage(
            ChatIntId(chatId),
            "‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ —Ä–∞–≤–Ω—ã–º —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º."
          )
        ).void
      } else {
        reminderStorage.findByChatId(chatId).flatMap { reminders =>
          if (reminderIndex >= 1 && reminderIndex <= reminders.length) {
            val reminder = reminders(reminderIndex - 1)
            reminderStorage.update(reminder.id.get, newDateTime, newMessage) >>
              bot.execute(
                Methods.sendMessage(
                  ChatIntId(chatId),
                  s"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: $newMessage"
                )
              ).void
          } else {
            bot.execute(
              Methods.sendMessage(
                ChatIntId(chatId),
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
              )
            ).void
          }
        }
      }
    }
  }


  def deleteReminder(chatId: Long, reminderIndex: Int): F[Unit] = {
    reminderStorage.findByChatId(chatId).flatMap { reminders =>
      if (reminderIndex >= 1 && reminderIndex <= reminders.length) {
        val reminder = reminders(reminderIndex - 1)
        reminderStorage.deleteById(reminder.id.get).flatMap { deleted =>
          if (deleted)
            bot.execute(Methods.sendMessage(ChatIntId(chatId), s"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${reminder.message}")).void
          else
            bot.execute(Methods.sendMessage(ChatIntId(chatId), "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ª–∏–±–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å")).void
        }
      } else {
        bot.execute(Methods.sendMessage(ChatIntId(chatId), "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")).void
      }
    }
  }



  def checkReminders: F[Unit] = {
    for {
      now <- Async[F].delay(System.currentTimeMillis() / 1000)
      dueReminders <- reminderStorage.findDueReminders(now)
      _ <- dueReminders.traverse_ { reminder =>
        bot.execute(
          Methods.sendMessage(
            ChatIntId(reminder.chatId),
            s"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.message} (${botUtils.formatTimestamp(reminder.dateTime)})"
          )
        ) >> reminderStorage.deleteById(reminder.id.get)
      }
    } yield ()
  }
}